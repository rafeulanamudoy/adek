datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  socialLoginType SOCIALLOGINTYPES @default(EMAIL_PASSWORD)
  fullName        String

  email String @unique

  role         UserRole 
  password     String?  @default("")
  companyName  String?
  phoneNumber  String?
  profileImage String   @default("")
  coverPhoto   String   @default("")

  sentMessages     PrivateMessage[] @relation("SentMessages")
  receivedMessages PrivateMessage[] @relation("ReceivedMessages")
  user1Convarsion  Conversation[]   @relation("User1Convarsion")
  user2Convarsion  Conversation[]   @relation("User2Convarsion")
  admin            Admin?
  isOtpVerify      Boolean          @default(false)
  isProfile        Boolean          @default(false)

  Notifications      Notifications[]
  reciveNotificaiton Boolean         @default(false)
  fcmToken           String?
  isSubscription     Boolean         @default(false)

  status UserStatus @default(ACTIVE)
  Otp    Otp[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Profile   Profile?

  Group        Group[]
  UserGroup    UserGroup[]
  GroupMessage GroupMessage[]

  @@map("users")
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId    String   @unique @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profile")
}

model Admin {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  nickName String @unique
  password String
  email    String @unique
  userId   String @unique @db.ObjectId
  user     User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  otpCode   String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model Group {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  groupImage   String
  description  String?        @default("")
  adminId      String         @db.ObjectId
  admin        User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
  members      UserGroup[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  groupMessage GroupMessage[]

  @@map("groups")
}

model UserGroup {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  groupId String @db.ObjectId

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId])
  @@map("user_groups")
}

model GroupMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @db.ObjectId
  senderId  String   @db.ObjectId
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content   String
  seenBy    String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId, senderId])
  @@map("group_message")
}

model PrivateMessage {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  senderId       String       @db.ObjectId
  receiverId     String       @db.ObjectId
  content        String?
  imageUrl       String?
  conversationId String       @db.ObjectId
  read           Boolean      @default(false)
  sender         User?        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User?        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("private_messages")
}

model Conversation {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  user1Id        String             @db.ObjectId
  user2Id        String             @db.ObjectId
  lastMessage    String?
  user1          User?              @relation("User1Convarsion", fields: [user1Id], references: [id], onDelete: Cascade)
  user2          User?              @relation("User2Convarsion", fields: [user2Id], references: [id], onDelete: Cascade)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  status         ConversationStatus @default(DEACTIVE)
  privateMessage PrivateMessage[]

  @@unique([user1Id, user2Id])
  @@map("conversations")
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  body       String
  title      String
  user       User     @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notifications")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
  PENDING
}

enum UserRole {
  ADMIN
  USER
  SELLER
  BUYER
  ALL
}

enum ConversationStatus {
  ACTIVE
  DEACTIVE
}

enum SOCIALLOGINTYPES {
  GOOGLE
 
  FACEBOOK
  APPLE
   EMAIL_PASSWORD
}
